plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.+'
}

ext.build_number=""
if (System.getenv().BUILD_NUMBER) {
    ext.build_number="-" + System.getenv().BUILD_NUMBER
}

version = "${minecraft_version}-${mod_version}${build_number}"
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    implementation "dev.latvian.mods:rhino-neoforge:${rhino_version}"
    implementation "uk.joshiejack.penguinlib:Penguin-Lib:${minecraft_version}-${penguinlib_version}"
    implementation "uk.joshiejack.horticulture:Horticulture:${minecraft_version}-${horticulture_version}"
    implementation "uk.joshiejack.shopaholic:Shopaholic:${minecraft_version}-${shopaholic_version}"
    implementation "uk.joshiejack.simplyseasons:Simply-Seasons:${minecraft_version}-${simplyseasons_version}"
    implementation("uk.joshiejack.settlements:Settlements:${minecraft_version}-${settlements_version}")
    // compile against the JEI API but do not include it at runtime
    compileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    // at runtime, use the full JEI jar for NeoForge
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")
    compileOnly("curse.maven:glitchcore-955399:${glitchcore_version}")
    compileOnly "curse.maven:sereneseasons-291874:${sereneseasons_version}"
}

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            rhino_version       : rhino_version, rhino_version_range: rhino_version_range,
            penguinlib_version  : penguinlib_version, penguinlib_version_range: penguinlib_version_range,
            simplyseasons_version: simplyseasons_version, simplyseasons_version_range: simplyseasons_version_range,
            horticulture_version: horticulture_version, horticulture_version_range: horticulture_version_range,
            shopaholic_version  : shopaholic_version, shopaholic_version_range: shopaholic_version_range,
            settlements_version : settlements_version, settlements_version_range: settlements_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId = mod_name.replace(" ", "-")
            from components.java
        }
    }
    repositories {
        if (project.hasProperty('mavenRepository')) {
            maven { url mavenRepository }
        } else {
            mavenLocal()
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}